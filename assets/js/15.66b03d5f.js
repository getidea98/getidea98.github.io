(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{416:function(a,t,s){"use strict";s.r(t);var r=s(34),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java反射与注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java反射与注解"}},[a._v("#")]),a._v(" Java反射与注解")]),a._v(" "),s("p",[a._v("tag: Java基础")]),a._v(" "),s("h2",{attrs:{id:"🎍注解基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🎍注解基础"}},[a._v("#")]),a._v(" 🎍注解基础")]),a._v(" "),s("h3",{attrs:{id:"元注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元注解"}},[a._v("#")]),a._v(" 元注解")]),a._v(" "),s("ol",[s("li",[a._v("@Target 注解使用范围")]),a._v(" "),s("li",[a._v("@Document")]),a._v(" "),s("li",[a._v("@Retention 注解的保存级别 （Source、Class、Runtime）")]),a._v(" "),s("li",[a._v("@Inherited 可以继承父类注解")])]),a._v(" "),s("p",[a._v("反射是框架的基础。")]),a._v(" "),s("p",[s("strong",[a._v("JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。")])]),a._v(" "),s("h2",{attrs:{id:"class-反射的核心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-反射的核心"}},[a._v("#")]),a._v(" Class ——反射的核心")]),a._v(" "),s("h3",{attrs:{id:"获得class的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获得class的方法"}},[a._v("#")]),a._v(" 获得Class的方法")]),a._v(" "),s("ol",[s("li",[a._v("任何对象都有getClass()方法。已经有对象，再用反射意义不大。")]),a._v(" "),s("li",[a._v("任何数据类型都有静态.clss属性。需要导包。")]),a._v(" "),s("li",[a._v("通过Class的forName（常用）。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);